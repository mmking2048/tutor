00003000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 11/23/2018 10:16:43 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : ECE 441 Design Project
00000000                             3  * Written by : Michelle Yang
00000000                             4  * Date       : 11/9/2018
00000000                             5  * Description: Simple operating system for Easy 68K
00000000                             6  *-----------------------------------------------------------
00000000                             7  *-----------------------------------------------------------
00000000                             8  * Data segment
00000000                             9  *-----------------------------------------------------------
00001000                            10          ORG     $1000
00001000                            11          
00001000= 4D 4F 4E 49 54 4F ...     12  PROMPT  DC.B    'MONITOR441> ',0 ;prompt
0000100D= 49 4E 56 41 4C 49 ...     13  INVALID DC.B    'INVALID COMMAND',0
0000101D                            14  
0000101D                            15  INPUT   DS.B    80              ;buffer for commands
0000106D                            16  
0000106D                            17  COMP_TBL                        ;table of all commands
0000106D= 48 45 4C 50 00            18          DC.B    'HELP',0
00001072                            19          DS.B    2               ;padding so table is aligned at 6 bytes
00001074= 4D 44 53 50 20 00         20          DC.B    'MDSP ',0
0000107A                            21          DS.B    1
0000107B= 53 4F 52 54 57 20 00      22          DC.B    'SORTW ',0
00001082= 4D 4D 20 00               23          DC.B    'MM ',0
00001086                            24          DS.B    3
00001089= 4D 53 20 00               25          DC.B    'MS ',0
0000108D                            26          DS.B    3
00001090= 42 46 20 00               27          DC.B    'BF ',0
00001094                            28          DS.B    3
00001097= 42 4D 4F 56 20 00         29          DC.B    'BMOV ',0
0000109D                            30          DS.B    1
0000109E= 42 54 53 54 20 00         31          DC.B    'BTST ',0
000010A4                            32          DS.B    1
000010A5= 42 53 43 48 20 00         33          DC.B    'BSCH ',0
000010AB                            34          DS.B    1
000010AC= 47 4F 20 00               35          DC.B    'GO ',0
000010B0                            36          DS.B    3
000010B3= 44 46 00                  37          DC.B    'DF',0
000010B6                            38          DS.B    4
000010BA= 45 58 49 54 00            39          DC.B    'EXIT',0
000010BF                            40          DS.B    2
000010C1                            41  
000010C1= 48 45 4C 50 3A 20 ...     42  HELP1   DC.B    'HELP: displays this help message',0
000010E2= 4D 44 53 50 20 3C ...     43  HELP2   DC.B    'MDSP <address1> <address2>: outputs address and memory contents from <address1> to <address2>',0
00001140= 4D 44 53 50 20 3C ...     44  HELP2A  DC.B    'MDSP <address1>: outputs address and memory from <address1> to <address + 16 bytes',0
00001193= 53 4F 52 54 57 20 ...     45  HELP3   DC.B    'SORTW <address1> <address2> <order>: sort block of memory between <address1> and <address2>, in ascending (A) or descending (D) order',0
00001219= 4D 4D 20 3C 61 64 ...     46  HELP4   DC.B    'MM <address> <size>: display memory and modify/enter new data, showing byte (B), word (W), or longword (L) bytes',0
0000128A= 4D 53 20 3C 61 64 ...     47  HELP5   DC.B    'MS <address> <data>: set memory at <address> to <data>, which is of type ASCII or hex',0
000012E0= 42 46 20 3C 61 64 ...     48  HELP6   DC.B    'BF <address1> <address2> <data>: fills memory between <address1> and <address2> with <data>, which is word size',0
00001350= 42 4D 4F 56 20 3C ...     49  HELP7   DC.B    'BMOV <address1> <address2> <address3>: move block of memory between <address1> and <address2> to location starting at <address3>',0
000013D1= 42 54 53 54 20 3C ...     50  HELP8   DC.B    'BTST <address1> <address2>: test a block of memory between <address1> and <address2>',0
00001426= 42 53 43 48 20 3C ...     51  HELP9   DC.B    'BSCH <address1> <address2> <string>: search for <string> between <address1> and <address2>',0
00001481= 47 4F 20 3C 61 64 ...     52  HELP10  DC.B    'GO <address>: execute program at <address>',0
000014AC= 44 46 3A 20 64 69 ...     53  HELP11  DC.B    'DF: display registers and values',0
000014CD= 45 58 49 54 3A 20 ...     54  HELP12  DC.B    'EXIT: terminate the program',0
000014E9                            55  
000014E9= 42 54 53 54 20 73 ...     56  SUCCESS DC.B    'BTST successful',0
000014F9= 42 54 53 54 20 66 ...     57  FAILURE DC.B    'BTST failed',0
00001505                            58  
00001505                            59  *-----------------------------------------------------------
00001505                            60  * Program segment
00001505                            61  *-----------------------------------------------------------        
00003000                            62          ORG     $3000
00003000                            63  *Start here: set up and call to main        
00003000  6100 002C                 64  START   BSR     SETUP           ;set up here
00003004  6100 0008                 65          BSR     MAIN            ;call main
00003008                            66          
00003008  103C 0009                 67          MOVE.B  #9,D0           ;exit program
0000300C  4E4F                      68          TRAP    #15
0000300E                            69          
0000300E                            70  * Main method
0000300E  227C 00001000             71  MAIN    MOVEA.L #PROMPT,A1
00003014  103C 000E                 72          MOVE.B  #14,D0
00003018  4E4F                      73          TRAP    #15             ;print prompt
0000301A                            74          
0000301A  227C 0000101D             75          MOVEA.L #INPUT,A1
00003020  103C 0002                 76          MOVE.B  #2,D0
00003024  4E4F                      77          TRAP    #15             ;read command
00003026                            78  
00003026  6100 0048                 79          BSR     PARSE
0000302A                            80          
0000302A  60E2                      81          BRA     MAIN            ;get next command
0000302C                            82          
0000302C  4E75                      83  EXITMAIN RTS
0000302E                            84  
0000302E                            85  *-----------------------------------------------------------
0000302E                            86  * Setup exception handler
0000302E                            87  *-----------------------------------------------------------
0000302E  21F9 000034F8 0008        88  SETUP   MOVE.L  BUS,$008
00003036  21F9 000034FA 000C        89          MOVE.L  ADDR,$00C
0000303E  21F9 000034FC 0010        90          MOVE.L  ILLI,$010
00003046  21F9 00003500 0014        91          MOVE.L  DIV0,$014
0000304E  21F9 00003502 0018        92          MOVE.L  CHK,$018
00003056  21F9 000034FE 0020        93          MOVE.L  PRIV,$020
0000305E  21F9 00003504 0028        94          MOVE.L  LNEA,$028
00003066  21F9 00003506 002C        95          MOVE.L  LNEF,$02C
0000306E  4E75                      96          RTS
00003070                            97  
00003070                            98  *-----------------------------------------------------------
00003070                            99  * Parse commands
00003070                           100  *-----------------------------------------------------------
00003070  48E7 8070                101  PARSE   MOVEM.L A1/A2/A3/D0,-(SP)     ;save registers
00003074  227C 0000101D            102          MOVEA.L #INPUT,A1       ;get front of string
0000307A                           103          
0000307A  247C 0000106D            104          MOVEA.L #COMP_TBL,A2    ;get item in command string table
00003080  267C 0000106D            105          MOVEA.L #COMP_TBL,A3
00003086                           106          
00003086  7004                     107          MOVE.L  #4,D0           ;set D0 to number of chars to check
00003088                           108  
00003088  B709                     109  PHELP   CMP.B   (A1)+,(A3)+     ;is command HELP?
0000308A  56C8 FFFC                110          DBNE    D0,PHELP        ;check next character
0000308E  6600 000A                111          BNE     NHELP           ;if did not match, check next string
00003092  6100 016E                112          BSR     HELP
00003096  6000 0158                113          BRA     EXITPARSE
0000309A                           114  
0000309A  227C 0000101D            115  NHELP   MOVEA.L #INPUT,A1
000030A0  6100 0154                116          BSR     NCHAR
000030A4  7004                     117          MOVE.L  #4,D0
000030A6                           118  
000030A6  B709                     119  PMDSP   CMP.B   (A1)+,(A3)+     ;is command MDSP?
000030A8  56C8 FFFC                120          DBNE    D0,PMDSP        ;check next character
000030AC  6600 000A                121          BNE     NMDSP
000030B0  6100 01F6                122          BSR     MDSP
000030B4  6000 013A                123          BRA     EXITPARSE       ;if all chars matched, exit
000030B8                           124  
000030B8  227C 0000101D            125  NMDSP   MOVEA.L #INPUT,A1
000030BE  6100 0136                126          BSR     NCHAR
000030C2  7005                     127          MOVE.L  #5,D0
000030C4                           128  
000030C4  B709                     129  PSORTW  CMP.B   (A1)+,(A3)+     ;is command SORTW?
000030C6  56C8 FFFC                130          DBNE    D0,PSORTW       ;check next character
000030CA  6600 000A                131          BNE     NSORTW
000030CE  6100 023C                132          BSR     SORTW
000030D2  6000 011C                133          BRA     EXITPARSE       ;if all chars matched, exit
000030D6                           134  
000030D6  227C 0000101D            135  NSORTW  MOVEA.L #INPUT,A1
000030DC  6100 0118                136          BSR     NCHAR
000030E0  7002                     137          MOVE.L  #2,D0
000030E2                           138  
000030E2  B709                     139  PMM     CMP.B   (A1)+,(A3)+     ;is command MM?
000030E4  56C8 FFFC                140          DBNE    D0,PMM          ;check next character
000030E8  6600 000A                141          BNE     NMM
000030EC  6100 0260                142          BSR     MM
000030F0  6000 00FE                143          BRA     EXITPARSE       ;if all chars matched, exit
000030F4                           144  
000030F4  227C 0000101D            145  NMM     MOVEA.L #INPUT,A1
000030FA  6100 00FA                146          BSR     NCHAR
000030FE  7002                     147          MOVE.L  #2,D0
00003100                           148  
00003100  B709                     149  PMS     CMP.B   (A1)+,(A3)+     ;is command MS?
00003102  56C8 FFFC                150          DBNE    D0,PMS          ;check next character
00003106  6600 000A                151          BNE     NMS
0000310A  6100 02DA                152          BSR     MS
0000310E  6000 00E0                153          BRA     EXITPARSE       ;if all chars matched, exit
00003112                           154  
00003112  227C 0000101D            155  NMS     MOVEA.L #INPUT,A1
00003118  6100 00DC                156          BSR     NCHAR
0000311C  7002                     157          MOVE.L  #2,D0
0000311E                           158  
0000311E  B709                     159  PBF     CMP.B   (A1)+,(A3)+     ;is command BF?
00003120  56C8 FFFC                160          DBNE    D0,PBF          ;check next character
00003124  6600 000A                161          BNE     NBF
00003128  6100 02D2                162          BSR     BF
0000312C  6000 00C2                163          BRA     EXITPARSE       ;if all chars matched, exit
00003130                           164  
00003130  227C 0000101D            165  NBF     MOVEA.L #INPUT,A1
00003136  6100 00BE                166          BSR     NCHAR
0000313A  7004                     167          MOVE.L  #4,D0
0000313C                           168  
0000313C  B709                     169  PBMOV   CMP.B   (A1)+,(A3)+     ;is command MOV?
0000313E  56C8 FFFC                170          DBNE    D0,PBMOV        ;check next character
00003142  6600 000A                171          BNE     NBMOV
00003146  6100 02D8                172          BSR     BMOV
0000314A  6000 00A4                173          BRA     EXITPARSE       ;if all chars matched, exit
0000314E                           174  
0000314E  227C 0000101D            175  NBMOV   MOVEA.L #INPUT,A1
00003154  6100 00A0                176          BSR     NCHAR
00003158  7004                     177          MOVE.L  #4,D0
0000315A                           178  
0000315A  B709                     179  PBTST   CMP.B   (A1)+,(A3)+     ;is command BTST?
0000315C  56C8 FFFC                180          DBNE    D0,PBTST        ;check next character
00003160  6600 000A                181          BNE     NBTST
00003164  6100 02E0                182          BSR     BTST
00003168  6000 0086                183          BRA     EXITPARSE       ;if all chars matched, exit
0000316C                           184  
0000316C  227C 0000101D            185  NBTST   MOVEA.L #INPUT,A1
00003172  6100 0082                186          BSR     NCHAR
00003176  7004                     187          MOVE.L  #4,D0
00003178                           188  
00003178  B709                     189  PBSCH   CMP.B   (A1)+,(A3)+     ;is command BSCH?
0000317A  56C8 FFFC                190          DBNE    D0,PBSCH        ;check next character
0000317E  6600 000A                191          BNE     NBSCH
00003182  6100 0368                192          BSR     BSCH
00003186  6000 0068                193          BRA     EXITPARSE       ;if all chars matched, exit
0000318A                           194  
0000318A  227C 0000101D            195  NBSCH   MOVEA.L #INPUT,A1
00003190  6100 0064                196          BSR     NCHAR
00003194  7002                     197          MOVE.L  #2,D0
00003196                           198  
00003196  B709                     199  PGO     CMP.B   (A1)+,(A3)+     ;is command GO?
00003198  56C8 FFFC                200          DBNE    D0,PGO          ;check next character
0000319C  6600 000A                201          BNE     NGO
000031A0  6100 034C                202          BSR     GO
000031A4  6000 004A                203          BRA     EXITPARSE       ;if all chars matched, exit
000031A8                           204  
000031A8  227C 0000101D            205  NGO     MOVEA.L #INPUT,A1
000031AE  6100 0046                206          BSR     NCHAR
000031B2  7002                     207          MOVE.L  #2,D0
000031B4                           208  
000031B4  B709                     209  PDF     CMP.B   (A1)+,(A3)+     ;is command DF?
000031B6  56C8 FFFC                210          DBNE    D0,PDF          ;check next character
000031BA  6600 000A                211          BNE     NDF
000031BE  6100 0334                212          BSR     DF
000031C2  6000 002C                213          BRA     EXITPARSE       ;if all chars matched, exit
000031C6                           214  
000031C6  227C 0000101D            215  NDF     MOVEA.L #INPUT,A1
000031CC  6100 0028                216          BSR     NCHAR
000031D0  7004                     217          MOVE.L  #4,D0
000031D2                           218  
000031D2  B709                     219  PEXIT   CMP.B   (A1)+,(A3)+     ;is command EXIT?
000031D4  56C8 FFFC                220          DBNE    D0,PEXIT        ;check next character
000031D8  6600 000A                221          BNE     NEXIT
000031DC  6100 0318                222          BSR     EXIT
000031E0  6000 000E                223          BRA     EXITPARSE       ;if all chars matched, exit
000031E4                           224  
000031E4  227C 0000100D            225  NEXIT   MOVEA.L #INVALID,A1     ;if got here, failed
000031EA  103C 000D                226          MOVE.B  #13,D0
000031EE  4E4F                     227          TRAP    #15
000031F0                           228          
000031F0                           229  EXITPARSE
000031F0  4CDF 0E01                230          MOVEM.L (SP)+,A1/A2/A3/D0 ;restore registers
000031F4  4E75                     231          RTS
000031F6                           232  
000031F6                           233  *-----------------------------------------------------------
000031F6                           234  * Helper function for incrementing between checks
000031F6                           235  *-----------------------------------------------------------
000031F6  227C 0000101D            236  NCHAR   MOVEA.L #INPUT,A1       ;reset A1 to beginning of input string
000031FC  5E8A                     237          ADDA.L  #7,A2           ;increment to get next command string
000031FE  264A                     238          MOVEA.L A2,A3           ;update counter 
00003200  4E75                     239          RTS
00003202                           240  
00003202                           241  *-----------------------------------------------------------
00003202                           242  * HELP
00003202                           243  *-----------------------------------------------------------
00003202  48E7 8040                244  HELP    MOVEM.L D0/A1,-(SP)     ;save registers
00003206                           245  
00003206  227C 000010C1            246          MOVEA.L #HELP1,A1
0000320C  103C 000D                247          MOVE.B #13,D0
00003210  4E4F                     248          TRAP #15
00003212                           249  
00003212  227C 000010E2            250          MOVEA.L #HELP2,A1
00003218  103C 000D                251          MOVE.B #13,D0
0000321C  4E4F                     252          TRAP #15
0000321E                           253  
0000321E  227C 00001140            254          MOVEA.L #HELP2A,A1
00003224  103C 000D                255          MOVE.B #13,D0
00003228  4E4F                     256          TRAP #15
0000322A                           257  
0000322A  227C 00001193            258          MOVEA.L #HELP3,A1
00003230  103C 000D                259          MOVE.B #13,D0
00003234  4E4F                     260          TRAP #15
00003236                           261  
00003236  227C 00001219            262          MOVEA.L #HELP4,A1
0000323C  103C 000D                263          MOVE.B #13,D0
00003240  4E4F                     264          TRAP #15
00003242                           265  
00003242  227C 0000128A            266          MOVEA.L #HELP5,A1
00003248  103C 000D                267          MOVE.B #13,D0
0000324C  4E4F                     268          TRAP #15
0000324E                           269  
0000324E  227C 000012E0            270          MOVEA.L #HELP6,A1
00003254  103C 000D                271          MOVE.B #13,D0
00003258  4E4F                     272          TRAP #15
0000325A                           273  
0000325A  227C 00001350            274          MOVEA.L #HELP7,A1
00003260  103C 000D                275          MOVE.B #13,D0
00003264  4E4F                     276          TRAP #15
00003266                           277  
00003266  227C 000013D1            278          MOVEA.L #HELP8,A1
0000326C  103C 000D                279          MOVE.B #13,D0
00003270  4E4F                     280          TRAP #15
00003272                           281  
00003272  227C 00001426            282          MOVEA.L #HELP9,A1
00003278  103C 000D                283          MOVE.B #13,D0
0000327C  4E4F                     284          TRAP #15
0000327E                           285  
0000327E  227C 00001481            286          MOVEA.L #HELP10,A1
00003284  103C 000D                287          MOVE.B #13,D0
00003288  4E4F                     288          TRAP #15
0000328A                           289  
0000328A  227C 000014AC            290          MOVEA.L #HELP11,A1
00003290  103C 000D                291          MOVE.B #13,D0
00003294  4E4F                     292          TRAP #15
00003296                           293  
00003296  227C 000014CD            294          MOVEA.L #HELP12,A1
0000329C  103C 000D                295          MOVE.B #13,D0
000032A0  4E4F                     296          TRAP #15
000032A2                           297  
000032A2  4CDF 0201                298          MOVEM.L (SP)+,D0/A1     ;restore registers
000032A6  4E75                     299          RTS
000032A8                           300  
000032A8                           301  *-----------------------------------------------------------
000032A8                           302  * MDSP
000032A8                           303  *-----------------------------------------------------------
000032A8  48E7 C030                304  MDSP    MOVEM.L D0/D1/A2/A3,-(SP)
000032AC                           305  
000032AC  6100 0270                306          BSR ASCII               ;get first argument
000032B0  2441                     307          MOVEA.L D1,A2
000032B2  6100 026A                308          BSR ASCII               ;get second argument
000032B6  2641                     309          MOVEA.L D1,A3
000032B8                           310  
000032B8  B7FC 00000000            311          CMPA.L #0,A3            ;how many arguments?
000032BE  6600 000A                312          BNE MEMLOOP
000032C2  264A                     313          MOVEA.L A2,A3
000032C4  D7FC 00000010            314          ADDA.L #16,A3           ;if one argument, 16 bytes
000032CA                           315   
000032CA  B7CA                     316  MEMLOOP CMPA.L A2,A3            ;continue while still in range
000032CC  6F00 0038                317          BLE MDSPEXIT
000032D0                           318  
000032D0  220A                     319          MOVE.L A2,D1            ;print address
000032D2  143C 0010                320          MOVE.B #16,D2
000032D6  103C 000F                321          MOVE.B #15,D0
000032DA  4E4F                     322          TRAP #15
000032DC                           323  
000032DC  723A                     324          MOVE.L #$3A,D1          ;print colon
000032DE  103C 0006                325          MOVE.B #6,D0
000032E2  4E4F                     326          TRAP #15
000032E4                           327          
000032E4  221A                     328          MOVE.L (A2)+,D1         ;print value
000032E6  143C 0010                329          MOVE.B #16,D2
000032EA  103C 000F                330          MOVE.B #15,D0
000032EE  4E4F                     331          TRAP #15
000032F0                           332  
000032F0  123C 000D                333          MOVE.B #$D,D1           ;print cr
000032F4  103C 0006                334          MOVE.B #6,D0
000032F8  4E4F                     335          TRAP #15
000032FA  123C 000A                336          MOVE.B #$A,D1           ;print lf
000032FE  103C 0006                337          MOVE.B #6,D0
00003302  4E4F                     338          TRAP #15
00003304                           339  
00003304  60C4                     340          BRA MEMLOOP
00003306                           341  
00003306  4CDF 0C03                342  MDSPEXIT MOVEM.L (SP)+,D0/D1/A2/A3
0000330A  4E75                     343          RTS
0000330C                           344  
0000330C                           345  *-----------------------------------------------------------
0000330C                           346  * SORTW
0000330C                           347  *-----------------------------------------------------------
0000330C  48E7 E038                348  SORTW   MOVEM.L D0/D1/D2/A2/A3/A4,-(SP)
00003310                           349  
00003310  6100 020C                350          BSR ASCII               ;get first argument
00003314  2441                     351          MOVEA.L D1,A2
00003316  6100 0206                352          BSR ASCII               ;get second argument
0000331A  2641                     353          MOVEA.L D1,A3
0000331C  1419                     354          MOVE.B (A1)+,D2         ;get third argument
0000331E                           355  
0000331E  284A                     356          MOVEA.L A2,A4
00003320  244C                     357  SORTLOOP MOVEA.L A4,A2
00003322  B43C 0041                358  BUBBLE  CMP.B #$41,D2           ;is it "A"?
00003326  6E00 000C                359          BGT DSC
0000332A  B54A                     360  ASC     CMP.W (A2)+,(A2)+
0000332C  6300 0014                361          BLS CMPNXT              ;sort ascending
00003330  6000 0008                362          BRA SWAP
00003334  B54A                     363  DSC     CMP.W (A2)+,(A2)+
00003336  6200 000A                364          BHI CMPNXT              ;sort descending
0000333A                           365  
0000333A  2022                     366  SWAP    MOVE.L -(A2),D0
0000333C  4840                     367          SWAP.W D0
0000333E  2480                     368          MOVE.L D0,(A2)
00003340  60DE                     369          BRA SORTLOOP
00003342                           370  
00003342  558A                     371  CMPNXT  SUBA.L #2,A2
00003344  B7CA                     372          CMP.L A2,A3
00003346  6EDA                     373          BGT BUBBLE
00003348                           374  
00003348  4CDF 1C07                375          MOVEM.L (SP)+,D0/D1/D2/A2/A3/A4
0000334C  4E75                     376          RTS
0000334E                           377  
0000334E                           378  *-----------------------------------------------------------
0000334E                           379  * MM
0000334E                           380  *-----------------------------------------------------------
0000334E  48E7 F020                381  MM      MOVEM.L D0/D1/D2/D3/A2,-(SP)
00003352                           382  
00003352  6100 01CA                383          BSR ASCII               ;get address argument
00003356  2441                     384          MOVEA.L D1,A2
00003358  1619                     385          MOVE.B (A1)+,D3
0000335A                           386  
0000335A  220A                     387  MMNXT   MOVE.L A2,D1            ;print address
0000335C  143C 0010                388          MOVE.B #16,D2
00003360  103C 000F                389          MOVE.B #15,D0
00003364  4E4F                     390          TRAP #15
00003366                           391  
00003366  723A                     392          MOVE.L #$3A,D1          ;print colon
00003368  103C 0006                393          MOVE.B #6,D0
0000336C  4E4F                     394          TRAP #15
0000336E                           395          
0000336E  4281                     396          CLR.L D1
00003370  B63C 0042                397          CMP.B #$42,D3           ;is it a byte?
00003374  6600 0008                398          BNE MMWORD
00003378  121A                     399          MOVE.B (A2)+,D1
0000337A  6000 0012                400          BRA MMTRAP
0000337E                           401  
0000337E  B63C 0057                402  MMWORD  CMP.B #$57,D3           ;is it a word?
00003382  6600 0008                403          BNE MMLONG
00003386  321A                     404          MOVE.W (A2)+,D1
00003388  6000 0004                405          BRA MMTRAP
0000338C                           406  
0000338C  221A                     407  MMLONG  MOVE.L (A2)+,D1         ;it must be a long
0000338E                           408  
0000338E  143C 0010                409  MMTRAP  MOVE.B #16,D2
00003392  103C 000F                410          MOVE.B #15,D0
00003396  4E4F                     411          TRAP #15
00003398                           412  
00003398  723F                     413          MOVE.L #$3F,D1          ;print ?
0000339A  103C 0006                414          MOVE.B #6,D0
0000339E  4E4F                     415          TRAP #15
000033A0                           416  
000033A0  227C 0000101D            417          MOVEA.L #INPUT,A1
000033A6  103C 0002                418          MOVE.B  #2,D0
000033AA  4E4F                     419          TRAP    #15             ;read value
000033AC                           420  
000033AC  0C11 002E                421          CMP.B #$2E,(A1)         ;quit on . entered
000033B0  6700 002E                422          BEQ EXMM
000033B4                           423  
000033B4  4A01                     424          TST.B D1
000033B6  67A2                     425          BEQ MMNXT
000033B8                           426          
000033B8  6100 0164                427          BSR ASCII               ;convert value to hex
000033BC                           428  
000033BC  B63C 0042                429          CMP.B #$42,D3           ;is it a byte?
000033C0  6600 0008                430          BNE MMWORD2
000033C4  1501                     431          MOVE.B D1,-(A2)
000033C6  528A                     432          ADDA.L #1,A2
000033C8  6090                     433          BRA MMNXT
000033CA                           434  
000033CA  B63C 0057                435  MMWORD2 CMP.B #$57,D3           ;is it a word?
000033CE  6600 0008                436          BNE MMLONG2
000033D2  3501                     437          MOVE.W D1,-(A2)
000033D4  548A                     438          ADDA.L #2,A2
000033D6  6082                     439          BRA MMNXT
000033D8                           440  
000033D8  2501                     441  MMLONG2 MOVE.L D1,-(A2)         ;it must be a long
000033DA  588A                     442          ADDA.L #4,A2
000033DC                           443          
000033DC  6000 FF7C                444          BRA MMNXT
000033E0                           445  
000033E0  4CDF 040F                446  EXMM    MOVEM.L (SP)+,D0/D1/D2/D3/A2
000033E4  4E75                     447          RTS
000033E6                           448  
000033E6                           449  *-----------------------------------------------------------
000033E6                           450  * MS
000033E6                           451  *-----------------------------------------------------------
000033E6  48E7 4020                452  MS      MOVEM.L D1/A2,-(SP)
000033EA                           453  
000033EA  6100 0132                454          BSR ASCII               ;read address argument
000033EE  2441                     455          MOVEA.L D1,A2
000033F0  6100 012C                456          BSR ASCII               ;read data argument
000033F4                           457  
000033F4  3481                     458          MOVE.W D1,(A2)          ;write data to memory
000033F6                           459  
000033F6  4CDF 0402                460          MOVEM.L (SP)+,D1/A2
000033FA  4E75                     461          RTS
000033FC                           462  
000033FC                           463  *-----------------------------------------------------------
000033FC                           464  * BF
000033FC                           465  *-----------------------------------------------------------
000033FC  48E7 4030                466  BF      MOVEM.L D1/A2/A3,-(SP)
00003400                           467  
00003400  6100 011C                468          BSR ASCII               ;read start address
00003404  2441                     469          MOVEA.L D1,A2
00003406  6100 0116                470          BSR ASCII               ;read end address
0000340A  2641                     471          MOVEA.L D1,A3
0000340C  6100 0110                472          BSR ASCII               ;read data
00003410                           473  
00003410  B7CA                     474  BFLOOP  CMP.L A2,A3
00003412  6D00 0006                475          BLT EXBF
00003416  34C1                     476          MOVE.W D1,(A2)+         ;write to memory
00003418  60F6                     477          BRA BFLOOP
0000341A                           478  
0000341A  4CDF 0C02                479  EXBF    MOVEM.L (SP)+,D1/A2/A3
0000341E  4E75                     480          RTS
00003420                           481  
00003420                           482  *-----------------------------------------------------------
00003420                           483  * BMOV
00003420                           484  *-----------------------------------------------------------
00003420  48E7 4038                485  BMOV    MOVEM.L D1/A2/A3/A4,-(SP)
00003424                           486  
00003424  6100 00F8                487          BSR ASCII               ;read original start address
00003428  2441                     488          MOVEA.L D1,A2
0000342A  6100 00F2                489          BSR ASCII               ;read origina end address
0000342E  2641                     490          MOVEA.L D1,A3
00003430  6100 00EC                491          BSR ASCII               ;read new start address
00003434  2841                     492          MOVEA.L D1,A4
00003436                           493  
00003436  B7CA                     494  BMOVLOOP CMP.L A2,A3
00003438  6D00 0006                495          BLT EXBMOV
0000343C  38DA                     496          MOVE.W (A2)+,(A4)+      ;copy memory to new loc
0000343E  60F6                     497          BRA BMOVLOOP
00003440                           498  
00003440  4CDF 1C02                499  EXBMOV  MOVEM.L (SP)+,D1/A2/A3/A4
00003444  4E75                     500          RTS
00003446                           501  
00003446                           502  *-----------------------------------------------------------
00003446                           503  * BTST
00003446                           504  *-----------------------------------------------------------
00003446  48E7 E038                505  BTST    MOVEM.L D0/D1/D2/A2/A3/A4,-(SP)
0000344A                           506  
0000344A  6100 00D2                507          BSR ASCII               ;get start address
0000344E  2441                     508          MOVEA.L D1,A2
00003450  2841                     509          MOVEA.L D1,A4
00003452  6100 00CA                510          BSR ASCII               ;get end address
00003456  2641                     511          MOVEA.L D1,A3
00003458                           512  
00003458  B7CA                     513  BTSTLOOP1 CMP.L A2,A3
0000345A  6D00 0008                514          BLT ENDLOOP1
0000345E  14FC 0055                515          MOVE.B #$55,(A2)+       ;fill memory
00003462  60F4                     516          BRA BTSTLOOP1
00003464  244C                     517  ENDLOOP1 MOVEA.L A4,A2
00003466  143C 0055                518          MOVE.B #$55,D2
0000346A                           519  
0000346A  B7CA                     520  BTSTLOOP2 CMP.L A2,A3
0000346C  6D00 0010                521          BLT ENDLOOP2
00003470  0C12 0055                522          CMP.B #$55,(A2)         ;check read value
00003474  6600 001E                523          BNE BAD
00003478  14FC 00AA                524          MOVE.B #$AA,(A2)+       ;fill memory
0000347C  60EC                     525          BRA BTSTLOOP2
0000347E  244C                     526  ENDLOOP2 MOVEA.L A4,A2
00003480  143C 00AA                527          MOVE.B #$AA,D2
00003484                           528  
00003484  B7CA                     529  BTSTLOOP3 CMP.L A2,A3
00003486  6D00 0052                530          BLT GOOD
0000348A  0C1A 00AA                531          CMP.B #$AA,(A2)+        ;check read value
0000348E  6600 0004                532          BNE BAD
00003492  60F0                     533          BRA BTSTLOOP3
00003494                           534  
00003494  538A                     535  BAD     SUBA.L #1,A2            ;go back to broken address
00003496                           536  
00003496  227C 000014F9            537          MOVEA.L #FAILURE,A1     ;print failure message
0000349C  103C 000D                538          MOVE.B #13,D0
000034A0  4E4F                     539          TRAP #15
000034A2                           540  
000034A2  220A                     541          MOVE.L A2,D1            ;print address
000034A4  143C 0010                542          MOVE.B #16,D2
000034A8  103C 000F                543          MOVE.B #15,D0
000034AC  4E4F                     544          TRAP #15
000034AE                           545  
000034AE  723A                     546          MOVE.L #$3A,D1          ;print colon
000034B0  103C 0006                547          MOVE.B #6,D0
000034B4  4E4F                     548          TRAP #15
000034B6                           549  
000034B6  2202                     550          MOVE.L D2,D1            ;print data stored
000034B8  143C 0010                551          MOVE.B #16,D2
000034BC  103C 000F                552          MOVE.B #15,D0
000034C0  4E4F                     553          TRAP #15
000034C2                           554          
000034C2  722C                     555          MOVE.L #$2C,D1          ;print comma
000034C4  103C 0006                556          MOVE.B #6,D0
000034C8  4E4F                     557          TRAP #15
000034CA                           558  
000034CA  2212                     559          MOVE.L (A2),D1          ;print data read
000034CC  143C 0010                560          MOVE.B #16,D2
000034D0  103C 000F                561          MOVE.B #15,D0
000034D4  4E4F                     562          TRAP #15
000034D6                           563  
000034D6  6000 000E                564          BRA EXBTST
000034DA                           565  
000034DA  227C 000014E9            566  GOOD    MOVEA.L #SUCCESS,A1     ;print success message
000034E0  103C 000D                567          MOVE.B #13,D0
000034E4  4E4F                     568          TRAP #15
000034E6                           569  
000034E6  4CDF 1C07                570  EXBTST  MOVEM.L (SP)+,D0/D1/D2/A2/A3/A4
000034EA  4E75                     571          RTS
000034EC                           572  
000034EC                           573  *-----------------------------------------------------------
000034EC                           574  * BSCH
000034EC                           575  *-----------------------------------------------------------
000034EC  4E75                     576  BSCH    RTS
000034EE                           577  
000034EE                           578  *-----------------------------------------------------------
000034EE                           579  * GO
000034EE                           580  *-----------------------------------------------------------
000034EE  6100 002E                581  GO      BSR ASCII               ;get address
000034F2  4E75                     582          RTS
000034F4                           583  
000034F4                           584  *-----------------------------------------------------------
000034F4                           585  * DF
000034F4                           586  *-----------------------------------------------------------
000034F4  4E75                     587  DF      RTS
000034F6                           588  
000034F6                           589  *-----------------------------------------------------------
000034F6                           590  * EXIT
000034F6                           591  *-----------------------------------------------------------
000034F6  4E75                     592  EXIT    RTS
000034F8                           593  
000034F8                           594  *-----------------------------------------------------------
000034F8                           595  * Bus error exception
000034F8                           596  *-----------------------------------------------------------
000034F8  4E73                     597  BUS     RTE
000034FA                           598  
000034FA                           599  *-----------------------------------------------------------
000034FA                           600  * Address error exception
000034FA                           601  *-----------------------------------------------------------
000034FA  4E73                     602  ADDR    RTE
000034FC                           603  
000034FC                           604  *-----------------------------------------------------------
000034FC                           605  * Illegal instruction exception
000034FC                           606  *-----------------------------------------------------------
000034FC  4E73                     607  ILLI    RTE
000034FE                           608  
000034FE                           609  *-----------------------------------------------------------
000034FE                           610  * Privilege violation exception
000034FE                           611  *-----------------------------------------------------------
000034FE  4E73                     612  PRIV    RTE
00003500                           613  
00003500                           614  *-----------------------------------------------------------
00003500                           615  * Divide by zero exception
00003500                           616  *-----------------------------------------------------------
00003500  4E73                     617  DIV0    RTE
00003502                           618  
00003502                           619  *-----------------------------------------------------------
00003502                           620  * Check instruction exception
00003502                           621  *-----------------------------------------------------------
00003502  4E73                     622  CHK     RTE
00003504                           623  
00003504                           624  *-----------------------------------------------------------
00003504                           625  * Line A emulator exception
00003504                           626  *-----------------------------------------------------------
00003504  4E73                     627  LNEA    RTE
00003506                           628  
00003506                           629  *-----------------------------------------------------------
00003506                           630  * Line F emulator exception
00003506                           631  *-----------------------------------------------------------
00003506  4E73                     632  LNEF    RTE
00003508                           633  
00003508                           634  *-----------------------------------------------------------
00003508                           635  * DIGIT: convert single ascii digit to hex
00003508                           636  * Input: single ascii character in register D0
00003508                           637  * Output: hex value in register D0
00003508                           638  *-----------------------------------------------------------
00003508  B03C 0040                639  DIGIT   CMP.B #$40,D0
0000350C  6E00 000A                640          BGT HIGHER
00003510  0400 0030                641          SUBI.B #$30,D0
00003514  6000 0006                642          BRA EXITDIGIT
00003518  0400 0037                643  HIGHER  SUBI.B #$37,D0
0000351C  4E75                     644  EXITDIGIT RTS
0000351E                           645  
0000351E                           646  *-----------------------------------------------------------
0000351E                           647  * ASCII: convert ascii to hex
0000351E                           648  * Input: pointer to start of string in A1
0000351E                           649  * Output: hex value in register D1
0000351E                           650  *-----------------------------------------------------------
0000351E  48E7 8000                651  ASCII   MOVEM.L D0,-(SP)        ;save registers
00003522  4280                     652          CLR.L D0                ;clear for digit manipulation
00003524  4281                     653          CLR.L D1                ;clear for sum
00003526                           654  
00003526  1019                     655  CHAR    MOVE.B (A1)+,D0         ;move digit
00003528  4A00                     656          TST.B D0                ;continue until end of string
0000352A  6700 0014                657          BEQ EXITASCII
0000352E  B03C 0020                658          CMP.B #$20,D0           ;continue until empty space
00003532  6700 000C                659          BEQ EXITASCII
00003536                           660  
00003536  61D0                     661          BSR DIGIT
00003538                           662  
00003538  C3FC 0010                663          MULS.W #$10,D1          ;multiply by 10
0000353C  D280                     664          ADD.L D0,D1             ;add digit (Horner)
0000353E                           665  
0000353E  60E6                     666          BRA CHAR
00003540                           667  
00003540  4CDF 0001                668  EXITASCII MOVEM.L (SP)+,D0      ;restore registers
00003544  4E75                     669          RTS
00003546                           670  
00003546                           671          END START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDR                34FA
ASC                 332A
ASCII               351E
BAD                 3494
BF                  33FC
BFLOOP              3410
BMOV                3420
BMOVLOOP            3436
BSCH                34EC
BTST                3446
BTSTLOOP1           3458
BTSTLOOP2           346A
BTSTLOOP3           3484
BUBBLE              3322
BUS                 34F8
CHAR                3526
CHK                 3502
CMPNXT              3342
COMP_TBL            106D
DF                  34F4
DIGIT               3508
DIV0                3500
DSC                 3334
ENDLOOP1            3464
ENDLOOP2            347E
EXBF                341A
EXBMOV              3440
EXBTST              34E6
EXIT                34F6
EXITASCII           3540
EXITDIGIT           351C
EXITMAIN            302C
EXITPARSE           31F0
EXMM                33E0
FAILURE             14F9
GO                  34EE
GOOD                34DA
HELP                3202
HELP1               10C1
HELP10              1481
HELP11              14AC
HELP12              14CD
HELP2               10E2
HELP2A              1140
HELP3               1193
HELP4               1219
HELP5               128A
HELP6               12E0
HELP7               1350
HELP8               13D1
HELP9               1426
HIGHER              3518
ILLI                34FC
INPUT               101D
INVALID             100D
LNEA                3504
LNEF                3506
MAIN                300E
MDSP                32A8
MDSPEXIT            3306
MEMLOOP             32CA
MM                  334E
MMLONG              338C
MMLONG2             33D8
MMNXT               335A
MMTRAP              338E
MMWORD              337E
MMWORD2             33CA
MS                  33E6
NBF                 3130
NBMOV               314E
NBSCH               318A
NBTST               316C
NCHAR               31F6
NDF                 31C6
NEXIT               31E4
NGO                 31A8
NHELP               309A
NMDSP               30B8
NMM                 30F4
NMS                 3112
NSORTW              30D6
PARSE               3070
PBF                 311E
PBMOV               313C
PBSCH               3178
PBTST               315A
PDF                 31B4
PEXIT               31D2
PGO                 3196
PHELP               3088
PMDSP               30A6
PMM                 30E2
PMS                 3100
PRIV                34FE
PROMPT              1000
PSORTW              30C4
SETUP               302E
SORTLOOP            3320
SORTW               330C
START               3000
SUCCESS             14E9
SWAP                333A
